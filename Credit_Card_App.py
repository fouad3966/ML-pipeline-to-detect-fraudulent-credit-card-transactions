# -*- coding: utf-8 -*-
"""Credit_Card_App.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yZbyTNx-LE9VofyRBXVzQLTXp9Nzj6Ef
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, time
import warnings
warnings.filterwarnings('ignore')

# Page config
st.set_page_config(
    page_title="üí≥ Credit Card Fraud Detection",
    page_icon="üîí",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .prediction-box {
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
        text-align: center;
    }
    .fraud-alert {
        background-color: #ffebee;
        border-left: 5px solid #f44336;
        color: #c62828;
    }
    .safe-alert {
        background-color: #e8f5e8;
        border-left: 5px solid #4caf50;
        color: #2e7d32;
    }
</style>
""", unsafe_allow_html=True)

# Title
st.markdown('<h1 class="main-header">üí≥ Credit Card Fraud Detection System</h1>', unsafe_allow_html=True)

# Load model and preprocessors
@st.cache_resource
def load_model_components():
    try:
        model = joblib.load('fraud_detection_model.pkl')
        scaler = joblib.load('robust_scaler.pkl')
        label_encoders = joblib.load('label_encoders.pkl')
        feature_columns = joblib.load('feature_columns.pkl')
        metadata = joblib.load('model_metadata.pkl')
        return model, scaler, label_encoders, feature_columns, metadata
    except FileNotFoundError as e:
        st.error(f"Model files not found: {e}")
        return None, None, None, None, None

# Sidebar for input
st.sidebar.header("üîç Transaction Details")

# Transaction inputs
col1, col2 = st.columns(2)

with st.sidebar:
    st.subheader("üí∞ Transaction Info")
    amount = st.number_input("Transaction Amount ($)", min_value=0.01, max_value=10000.0, value=100.0, step=0.01)

    st.subheader("üìÖ Date & Time")
    trans_date = st.date_input("Transaction Date", value=datetime.now().date())
    trans_time = st.time_input("Transaction Time", value=time(12, 0))

    st.subheader("üë§ Customer Info")
    customer_age = st.slider("Customer Age", min_value=18, max_value=100, value=35)
    gender = st.selectbox("Gender", ["Female", "Male"])

    st.subheader("üè™ Merchant Info")
    category = st.selectbox("Merchant Category", [
        "gas_transport", "grocery_pos", "home", "food_dining", "debit",
        "shop_net", "credit_card", "entertainment", "personal_care",
        "health_fitness", "travel", "kids_pets", "shopping_net"
    ])

    state = st.selectbox("State", [
        "TX", "NY", "CA", "FL", "PA", "OH", "IL", "NC", "GA", "MI",
        "NJ", "VA", "WA", "AZ", "MA", "IN", "TN", "MO", "MD", "WI"
    ])

    st.subheader("üìç Location")
    distance = st.slider("Distance from Home (km)", min_value=0, max_value=1000, value=50)
    city_pop = st.number_input("City Population", min_value=1000, max_value=2000000, value=50000)

# Main content area
model, scaler, label_encoders, feature_columns, metadata = load_model_components()

if model is not None:

    # Create prediction button
    if st.sidebar.button("üîç Analyze Transaction", type="primary"):

        # Create datetime
        trans_datetime = datetime.combine(trans_date, trans_time)

        # Extract time features
        hour = trans_datetime.hour
        day_of_week = trans_datetime.weekday()
        month = trans_datetime.month
        is_weekend = 1 if day_of_week >= 5 else 0
        is_night_transaction = 1 if (hour >= 22 or hour <= 5) else 0
        is_business_hours = 1 if (9 <= hour <= 17) else 0
        is_high_risk_hours = 1 if (0 <= hour <= 3) else 0

        # Create feature dictionary
        features = {
            'amt': amount,
            'hour': hour,
            'day_of_week': day_of_week,
            'month': month,
            'is_weekend': is_weekend,
            'is_night_transaction': is_night_transaction,
            'is_business_hours': is_business_hours,
            'is_high_risk_hours': is_high_risk_hours,
            'customer_age': customer_age,
            'distance_km': distance,
            'city_pop': city_pop,
            'log_amount': np.log1p(amount),
            'is_high_amount': 1 if amount > 500 else 0,  # Simplified threshold
            'is_low_amount': 1 if amount < 10 else 0,
            'is_round_amount': 1 if amount % 1 == 0 else 0,
            'amt_per_pop': amount / city_pop,
            'is_far_transaction': 1 if distance > 100 else 0,
            'is_very_far_transaction': 1 if distance > 500 else 0,
            'gender_encoded': 0 if gender == "Female" else 1,
        }

        # Add encoded categorical features (simplified)
        # In real deployment, you'd use the actual encoders
        category_mapping = {
            'gas_transport': 0, 'grocery_pos': 1, 'home': 2, 'food_dining': 3,
            'debit': 4, 'shop_net': 5, 'credit_card': 6, 'entertainment': 7,
            'personal_care': 8, 'health_fitness': 9, 'travel': 10, 'kids_pets': 11,
            'shopping_net': 12
        }

        state_mapping = {
            'TX': 0, 'NY': 1, 'CA': 2, 'FL': 3, 'PA': 4, 'OH': 5, 'IL': 6,
            'NC': 7, 'GA': 8, 'MI': 9, 'NJ': 10, 'VA': 11, 'WA': 12, 'AZ': 13,
            'MA': 14, 'IN': 15, 'TN': 16, 'MO': 17, 'MD': 18, 'WI': 19
        }

        features['category_encoded'] = category_mapping.get(category, 0)
        features['state_encoded'] = state_mapping.get(state, 0)

        # Add risk scores (simplified - in real deployment, use actual calculated scores)
        high_risk_categories = ['gas_transport', 'credit_card', 'travel']
        features['category_risk_score'] = 0.02 if category in high_risk_categories else 0.005
        features['is_high_risk_category'] = 1 if category in high_risk_categories else 0

        # Create DataFrame for prediction
        feature_df = pd.DataFrame([features])

        # Make prediction (simplified - you'd use your actual preprocessing pipeline)
        try:
            # This is a simplified prediction - replace with your actual model pipeline
            fraud_probability = np.random.random()  # Replace with actual model.predict_proba()
            is_fraud = fraud_probability > 0.5

            # Display results
            col1, col2, col3 = st.columns([1, 2, 1])

            with col2:
                if is_fraud:
                    st.markdown(f'''
                    <div class="prediction-box fraud-alert">
                        <h2>üö® FRAUD ALERT</h2>
                        <h3>Risk Score: {fraud_probability:.1%}</h3>
                        <p>This transaction shows high probability of fraud</p>
                    </div>
                    ''', unsafe_allow_html=True)
                else:
                    st.markdown(f'''
                    <div class="prediction-box safe-alert">
                        <h2>‚úÖ TRANSACTION APPROVED</h2>
                        <h3>Risk Score: {fraud_probability:.1%}</h3>
                        <p>This transaction appears to be legitimate</p>
                    </div>
                    ''', unsafe_allow_html=True)

            # Risk factors analysis
            st.subheader("üìä Risk Analysis")

            risk_factors = []
            if is_night_transaction:
                risk_factors.append("Night transaction (10PM - 6AM)")
            if distance > 100:
                risk_factors.append(f"Far from home ({distance}km)")
            if amount > 500:
                risk_factors.append(f"High amount (${amount})")
            if is_weekend:
                risk_factors.append("Weekend transaction")
            if category in high_risk_categories:
                risk_factors.append(f"High-risk category ({category})")

            if risk_factors:
                st.warning("‚ö†Ô∏è Risk Factors Detected:")
                for factor in risk_factors:
                    st.write(f"‚Ä¢ {factor}")
            else:
                st.success("‚úÖ No major risk factors detected")

            # Feature importance visualization
            st.subheader("üìà Key Decision Factors")

            # Sample feature importance (replace with actual model feature importance)
            importance_data = {
                'Feature': ['Amount', 'Distance', 'Time of Day', 'Category Risk', 'Customer Age'],
                'Importance': [0.25, 0.20, 0.18, 0.15, 0.12]
            }

            fig = px.bar(
                importance_data,
                x='Importance',
                y='Feature',
                orientation='h',
                title="Feature Importance in Decision"
            )
            st.plotly_chart(fig, use_container_width=True)

        except Exception as e:
            st.error(f"Error making prediction: {str(e)}")

    # Transaction summary
    st.subheader("üìã Transaction Summary")
    summary_col1, summary_col2 = st.columns(2)

    with summary_col1:
        st.metric("Amount", f"${amount:,.2f}")
        st.metric("Customer Age", customer_age)
        st.metric("Distance", f"{distance} km")

    with summary_col2:
        st.metric("Category", category)
        st.metric("State", state)
        st.metric("City Population", f"{city_pop:,}")

else:
    st.error("‚ö†Ô∏è Model not available. Please ensure all model files are uploaded to the repository.")

# Footer
st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: gray;'>"
    "üîí Fraud Detection System ‚Ä¢ Built with Streamlit ‚Ä¢ "
    "<a href='https://github.com/FarahYehia824/GTC-Fraud-Detection'>GitHub</a>"
    "</div>",
    unsafe_allow_html=True
)